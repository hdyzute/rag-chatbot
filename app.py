import os
import uuid
import time
import tempfile
import logging
from threading import Thread
from flask import Flask, request, jsonify, send_from_directory
from flask_cors import CORS
from langchain_community.document_loaders import PyPDFLoader, TextLoader
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_community.embeddings import HuggingFaceEmbeddings
from langchain_community.vectorstores import Chroma
from langchain.chains import RetrievalQA
from langchain_community.llms import Ollama
from langchain.prompts import PromptTemplate
from langchain_community.embeddings import OllamaEmbeddings

# =========================
# üîß C·∫§U H√åNH & KH·ªûI T·∫†O
# =========================
logging.basicConfig(level=logging.INFO)
app = Flask(__name__)
CORS(app)

SESSION_TIMEOUT = 3600
CHROMA_DIR = "./chroma_dbs"
os.makedirs(CHROMA_DIR, exist_ok=True)

SESSIONS = {}

# L·∫•y Ollama base URL t·ª´ environment
OLLAMA_BASE_URL = os.getenv("OLLAMA_BASE_URL", "http://localhost:11434")

# =========================
# üìå T·∫¢I MODEL M·ªòT L·∫¶N
# =========================
try:
    logging.info("üöÄ ƒêang k·∫øt n·ªëi Ollama Embeddings...")
    EMBEDDINGS_MODEL = OllamaEmbeddings(
        base_url=OLLAMA_BASE_URL,
        model="nomic-embed-text"  # Model embedding nh·ªè g·ªçn
    )
    logging.info("‚úÖ Embedding model s·∫µn s√†ng.")

    logging.info(f"üöÄ ƒêang k·∫øt n·ªëi Ollama LLM t·∫°i {OLLAMA_BASE_URL}...")
    LLM = Ollama(model="llama3", temperature=0.3, base_url=OLLAMA_BASE_URL)
    LLM.invoke("ping")
    logging.info("‚úÖ LLM s·∫µn s√†ng.")
except Exception as e:
    logging.error(f"‚ùå L·ªói t·∫£i model: {e}")
    EMBEDDINGS_MODEL = None
    LLM = None

# =========================
# üß† CLASS CHATBOT
# =========================
class RAGChatbot:
    def __init__(self, embeddings_model, llm, session_id):
        self.embeddings = embeddings_model
        self.llm = llm
        self.vectorstore = None
        self.qa_chain = None
        self.session_id = session_id
        self.last_access = time.time()
        logging.info(f"üî∏ Kh·ªüi t·∫°o chatbot cho session {session_id}")

    def load_and_index(self, file_path):
        try:
            # --- Load t√†i li·ªáu ---
            if file_path.endswith('.pdf'):
                loader = PyPDFLoader(file_path)
            elif file_path.endswith('.txt'):
                loader = TextLoader(file_path, encoding='utf-8')
            else:
                raise ValueError("‚ùå Ch·ªâ h·ªó tr·ª£ file .pdf ho·∫∑c .txt")

            documents = loader.load()
            logging.info(f"üìÑ ƒê√£ t·∫£i {len(documents)} trang t·ª´ t√†i li·ªáu.")

            # --- Chia nh·ªè ---
            splitter = RecursiveCharacterTextSplitter(chunk_size=800, chunk_overlap=150)
            chunks = splitter.split_documents(documents)
            logging.info(f"‚úÇÔ∏è ƒê√£ chia th√†nh {len(chunks)} ƒëo·∫°n.")

            # --- L∆∞u v√†o Chroma persistent ---
            persist_dir = os.path.join(CHROMA_DIR, self.session_id)
            self.vectorstore = Chroma.from_documents(
                documents=chunks,
                embedding=self.embeddings,
                persist_directory=persist_dir
            )
            self.vectorstore.persist()

            retriever = self.vectorstore.as_retriever(search_kwargs={"k": 3})

            # --- Prompt ---
            template = """S·ª≠ d·ª•ng nh·ªØng th√¥ng tin ƒë∆∞·ª£c cung c·∫•p d∆∞·ªõi ƒë√¢y ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi m·ªôt c√°ch ch√≠nh x√°c.
N·∫øu kh√¥ng c√≥ th√¥ng tin, h√£y tr·∫£ l·ªùi: 'T√¥i kh√¥ng t√¨m th·∫•y th√¥ng tin n√†y trong t√†i li·ªáu.' 
Kh√¥ng b·ªãa ƒë·∫∑t.

Th√¥ng tin: {context}

C√¢u h·ªèi: {question}

Tr·∫£ l·ªùi chi ti·∫øt b·∫±ng ti·∫øng Vi·ªát:"""
            prompt = PromptTemplate(
                template=template,
                input_variables=["context", "question"]
            )

            self.qa_chain = RetrievalQA.from_chain_type(
                llm=self.llm,
                chain_type="stuff",
                retriever=retriever,
                return_source_documents=True,
                chain_type_kwargs={"prompt": prompt}
            )
            logging.info(f"‚úÖ T·∫°o QA chain th√†nh c√¥ng cho session {self.session_id}")
            return True
        except Exception as e:
            logging.error(f"‚ùå L·ªói khi x·ª≠ l√Ω t√†i li·ªáu: {e}")
            return False

    def chat(self, question):
        self.last_access = time.time()
        if not self.qa_chain:
            return {"error": "QA chain ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o."}

        logging.info(f"ü§ñ [{self.session_id}] Q: {question}")
        result = self.qa_chain.invoke({"query": question})

        sources = []
        if 'source_documents' in result:
            sources = [
                {"content": doc.page_content, "metadata": doc.metadata}
                for doc in result['source_documents']
            ]

        return {
            "answer": result.get("result", "Kh√¥ng c√≥ c√¢u tr·∫£ l·ªùi."),
            "sources": sources
        }

# =========================
# üßπ D·ªåN SESSION C≈®
# =========================
def cleanup_sessions():
    while True:
        now = time.time()
        expired_sessions = [
            sid for sid, bot in list(SESSIONS.items())
            if now - bot.last_access > SESSION_TIMEOUT
        ]
        for sid in expired_sessions:
            logging.info(f"üßπ D·ªçn session {sid} do h·∫øt h·∫°n.")
            # X√≥a vectorstore tr√™n ·ªï ƒëƒ©a
            persist_dir = os.path.join(CHROMA_DIR, sid)
            if os.path.exists(persist_dir):
                for root, dirs, files in os.walk(persist_dir, topdown=False):
                    for name in files:
                        os.remove(os.path.join(root, name))
                    for name in dirs:
                        os.rmdir(os.path.join(root, name))
                os.rmdir(persist_dir)
            SESSIONS.pop(sid, None)
        time.sleep(60)

Thread(target=cleanup_sessions, daemon=True).start()

# =========================
# üåê API ENDPOINTS
# =========================
@app.route('/')
def index():
    return send_from_directory('.', 'index.html')

@app.route('/api/upload', methods=['POST'])
def upload_file():
    if not EMBEDDINGS_MODEL or not LLM:
        return jsonify({"success": False, "message": "Model ch∆∞a s·∫µn s√†ng"}), 503

    file = request.files.get('file')
    if not file or file.filename == '':
        return jsonify({"success": False, "message": "Thi·∫øu file"}), 400

    suffix = os.path.splitext(file.filename)[1].lower()
    with tempfile.NamedTemporaryFile(delete=False, suffix=suffix) as tmp:
        file.save(tmp.name)
        file_path = tmp.name

    try:
        session_id = str(uuid.uuid4())
        chatbot = RAGChatbot(embeddings_model=EMBEDDINGS_MODEL, llm=LLM, session_id=session_id)
        if chatbot.load_and_index(file_path):
            SESSIONS[session_id] = chatbot
            return jsonify({"success": True, "session_id": session_id, "message": "T√†i li·ªáu ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω."})
        else:
            return jsonify({"success": False, "message": "X·ª≠ l√Ω t√†i li·ªáu th·∫•t b·∫°i"}), 500
    except Exception as e:
        logging.error(f"‚ùå L·ªói upload: {e}")
        return jsonify({"success": False, "message": str(e)}), 500
    finally:
        os.remove(file_path)

@app.route('/api/chat', methods=['POST'])
def handle_chat():
    data = request.json
    session_id = data.get('session_id')
    question = data.get('question', '').strip()

    if not session_id or session_id not in SESSIONS:
        return jsonify({"success": False, "message": "Session kh√¥ng h·ª£p l·ªá"}), 404
    if not question:
        return jsonify({"success": False, "message": "C√¢u h·ªèi tr·ªëng"}), 400

    chatbot = SESSIONS[session_id]
    try:
        result = chatbot.chat(question)
        if "error" in result:
            return jsonify({"success": False, "message": result["error"]}), 400
        return jsonify({"success": True, **result})
    except Exception as e:
        logging.error(f"‚ùå L·ªói khi chat session {session_id}: {e}")
        return jsonify({"success": False, "message": str(e)}), 500

# =========================
# üöÄ CH·∫†Y ·ª®NG D·ª§NG
# =========================
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)
